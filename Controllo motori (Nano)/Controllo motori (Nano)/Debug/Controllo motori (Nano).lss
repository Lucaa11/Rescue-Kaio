
Controllo motori (Nano).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000fbe  00001052  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000140  0080010a  0080010a  0000105c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001be6  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bee  00000000  00000000  00002dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a5b  00000000  00000000  000039c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000049c  00000000  00000000  0000441c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000765  00000000  00000000  000048b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f33  00000000  00000000  0000501d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00005f50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_1>
   8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 34       	cpi	r26, 0x4A	; 74
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 19 02 	call	0x432	; 0x432 <main>
  9e:	0c 94 dd 07 	jmp	0xfba	; 0xfba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitADC>:
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
  b0:	ac e7       	ldi	r26, 0x7C	; 124
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	8c 91       	ld	r24, X
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	8c 93       	st	X, r24
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <InitISR>:

volatile unsigned long topRaggiunti = 0;
volatile unsigned long ciao = 0;

void InitISR(void){
	PORTD|=(1<<PD3);
  c8:	5b 9a       	sbi	0x0b, 3	; 11
	EIMSK|=(1<<INT0)|(1<<INT1);
  ca:	8d b3       	in	r24, 0x1d	; 29
  cc:	83 60       	ori	r24, 0x03	; 3
  ce:	8d bb       	out	0x1d, r24	; 29
	EICRA|=(1<<ISC01)|(1<<ISC00)|(1<<ISC11)|(1<<ISC10);
  d0:	e9 e6       	ldi	r30, 0x69	; 105
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	8f 60       	ori	r24, 0x0F	; 15
  d8:	80 83       	st	Z, r24
	sei();
  da:	78 94       	sei
  dc:	08 95       	ret

000000de <__vector_7>:
}


	
ISR(TIMER2_COMPA_vect){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	OCR1A = CalculatePID(1);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 87 02 	call	0x50e	; 0x50e <CalculatePID>
 108:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 10c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	//dutyMDxA = CalculatePID(MDxA);
	//dutyMSxD = CalculatePID(MSxD);
	//dutyMDxD = CalculatePID(MDxD);
}
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	bf 91       	pop	r27
 116:	af 91       	pop	r26
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	7f 91       	pop	r23
 11e:	6f 91       	pop	r22
 120:	5f 91       	pop	r21
 122:	4f 91       	pop	r20
 124:	3f 91       	pop	r19
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
	topRaggiunti++;	
 144:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 148:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 14c:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 150:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	a1 1d       	adc	r26, r1
 158:	b1 1d       	adc	r27, r1
 15a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 15e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 162:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 166:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
	
}
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_1>:

ISR(INT0_vect){	
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	4f 92       	push	r4
 188:	5f 92       	push	r5
 18a:	6f 92       	push	r6
 18c:	7f 92       	push	r7
 18e:	8f 92       	push	r8
 190:	9f 92       	push	r9
 192:	af 92       	push	r10
 194:	bf 92       	push	r11
 196:	cf 92       	push	r12
 198:	df 92       	push	r13
 19a:	ef 92       	push	r14
 19c:	ff 92       	push	r15
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	tImp1 = TCNT0;
 1b6:	86 b5       	in	r24, 0x26	; 38
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	a0 e0       	ldi	r26, 0x00	; 0
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <tImp1>
 1c2:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <tImp1+0x1>
 1c6:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <tImp1+0x2>
 1ca:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <tImp1+0x3>
	topRaggiuntiProv1=topRaggiunti;
 1ce:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1d2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1d6:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 1da:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 1de:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <topRaggiuntiProv1>
 1e2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <topRaggiuntiProv1+0x1>
 1e6:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <topRaggiuntiProv1+0x2>
 1ea:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <topRaggiuntiProv1+0x3>
	if(topRaggiuntiProv1==vTopRaggiunti1){
 1ee:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <topRaggiuntiProv1>
 1f2:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <topRaggiuntiProv1+0x1>
 1f6:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <topRaggiuntiProv1+0x2>
 1fa:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <topRaggiuntiProv1+0x3>
 1fe:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <vTopRaggiunti1>
 202:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <vTopRaggiunti1+0x1>
 206:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <vTopRaggiunti1+0x2>
 20a:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <vTopRaggiunti1+0x3>
 20e:	48 17       	cp	r20, r24
 210:	59 07       	cpc	r21, r25
 212:	6a 07       	cpc	r22, r26
 214:	7b 07       	cpc	r23, r27
 216:	e9 f4       	brne	.+58     	; 0x252 <__vector_1+0xd6>
		difftImp1 = tImp1 - vtImp1;
 218:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <tImp1>
 21c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <tImp1+0x1>
 220:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <tImp1+0x2>
 224:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <tImp1+0x3>
 228:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <vtImp1>
 22c:	50 91 39 01 	lds	r21, 0x0139	; 0x800139 <vtImp1+0x1>
 230:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <vtImp1+0x2>
 234:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <vtImp1+0x3>
 238:	84 1b       	sub	r24, r20
 23a:	95 0b       	sbc	r25, r21
 23c:	a6 0b       	sbc	r26, r22
 23e:	b7 0b       	sbc	r27, r23
 240:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <difftImp1>
 244:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <difftImp1+0x1>
 248:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <difftImp1+0x2>
 24c:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <difftImp1+0x3>
 250:	4b c0       	rjmp	.+150    	; 0x2e8 <__vector_1+0x16c>
	}
	else{
		difftImp1 = (OCR0A - vtImp1) + (tImp1) + ((topRaggiuntiProv1-vTopRaggiunti1-1)*OCR0A);
 252:	e7 b5       	in	r30, 0x27	; 39
 254:	80 90 38 01 	lds	r8, 0x0138	; 0x800138 <vtImp1>
 258:	90 90 39 01 	lds	r9, 0x0139	; 0x800139 <vtImp1+0x1>
 25c:	a0 90 3a 01 	lds	r10, 0x013A	; 0x80013a <vtImp1+0x2>
 260:	b0 90 3b 01 	lds	r11, 0x013B	; 0x80013b <vtImp1+0x3>
 264:	c0 90 60 01 	lds	r12, 0x0160	; 0x800160 <tImp1>
 268:	d0 90 61 01 	lds	r13, 0x0161	; 0x800161 <tImp1+0x1>
 26c:	e0 90 62 01 	lds	r14, 0x0162	; 0x800162 <tImp1+0x2>
 270:	f0 90 63 01 	lds	r15, 0x0163	; 0x800163 <tImp1+0x3>
 274:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <topRaggiuntiProv1>
 278:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <topRaggiuntiProv1+0x1>
 27c:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <topRaggiuntiProv1+0x2>
 280:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <topRaggiuntiProv1+0x3>
 284:	40 90 a0 01 	lds	r4, 0x01A0	; 0x8001a0 <vTopRaggiunti1>
 288:	50 90 a1 01 	lds	r5, 0x01A1	; 0x8001a1 <vTopRaggiunti1+0x1>
 28c:	60 90 a2 01 	lds	r6, 0x01A2	; 0x8001a2 <vTopRaggiunti1+0x2>
 290:	70 90 a3 01 	lds	r7, 0x01A3	; 0x8001a3 <vTopRaggiunti1+0x3>
 294:	a7 b5       	in	r26, 0x27	; 39
 296:	41 50       	subi	r20, 0x01	; 1
 298:	51 09       	sbc	r21, r1
 29a:	61 09       	sbc	r22, r1
 29c:	71 09       	sbc	r23, r1
 29e:	9a 01       	movw	r18, r20
 2a0:	ab 01       	movw	r20, r22
 2a2:	24 19       	sub	r18, r4
 2a4:	35 09       	sbc	r19, r5
 2a6:	46 09       	sbc	r20, r6
 2a8:	57 09       	sbc	r21, r7
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__muluhisi3>
 2b0:	4e 2e       	mov	r4, r30
 2b2:	51 2c       	mov	r5, r1
 2b4:	61 2c       	mov	r6, r1
 2b6:	71 2c       	mov	r7, r1
 2b8:	a3 01       	movw	r20, r6
 2ba:	92 01       	movw	r18, r4
 2bc:	28 19       	sub	r18, r8
 2be:	39 09       	sbc	r19, r9
 2c0:	4a 09       	sbc	r20, r10
 2c2:	5b 09       	sbc	r21, r11
 2c4:	c2 0e       	add	r12, r18
 2c6:	d3 1e       	adc	r13, r19
 2c8:	e4 1e       	adc	r14, r20
 2ca:	f5 1e       	adc	r15, r21
 2cc:	dc 01       	movw	r26, r24
 2ce:	cb 01       	movw	r24, r22
 2d0:	8c 0d       	add	r24, r12
 2d2:	9d 1d       	adc	r25, r13
 2d4:	ae 1d       	adc	r26, r14
 2d6:	bf 1d       	adc	r27, r15
 2d8:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <difftImp1>
 2dc:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <difftImp1+0x1>
 2e0:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <difftImp1+0x2>
 2e4:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <difftImp1+0x3>
		
	}
	speed[1] = 250000.0 / (622.0*difftImp1);
 2e8:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <difftImp1>
 2ec:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <difftImp1+0x1>
 2f0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <difftImp1+0x2>
 2f4:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <difftImp1+0x3>
 2f8:	0e 94 e5 05 	call	0xbca	; 0xbca <__floatunsisf>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e8       	ldi	r19, 0x80	; 128
 300:	4b e1       	ldi	r20, 0x1B	; 27
 302:	54 e4       	ldi	r21, 0x44	; 68
 304:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 308:	9b 01       	movw	r18, r22
 30a:	ac 01       	movw	r20, r24
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	74 e2       	ldi	r23, 0x24	; 36
 310:	84 e7       	ldi	r24, 0x74	; 116
 312:	98 e4       	ldi	r25, 0x48	; 72
 314:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__divsf3>
 318:	60 93 de 01 	sts	0x01DE, r22	; 0x8001de <speed+0x4>
 31c:	70 93 df 01 	sts	0x01DF, r23	; 0x8001df <speed+0x5>
 320:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <speed+0x6>
 324:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <speed+0x7>
	//Serial_Send("\t");
	//Serial_Send(difftImp1);
	//Serial_Send("\t");
	//Serial_Send_Int((int)(speed[1]*1000));
	//SerialN();
	vtImp1 = tImp1;
 328:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <tImp1>
 32c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <tImp1+0x1>
 330:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <tImp1+0x2>
 334:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <tImp1+0x3>
 338:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <vtImp1>
 33c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <vtImp1+0x1>
 340:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <vtImp1+0x2>
 344:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <vtImp1+0x3>
	vTopRaggiunti1 = topRaggiuntiProv1;
 348:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <topRaggiuntiProv1>
 34c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <topRaggiuntiProv1+0x1>
 350:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <topRaggiuntiProv1+0x2>
 354:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <topRaggiuntiProv1+0x3>
 358:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <vTopRaggiunti1>
 35c:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <vTopRaggiunti1+0x1>
 360:	a0 93 a2 01 	sts	0x01A2, r26	; 0x8001a2 <vTopRaggiunti1+0x2>
 364:	b0 93 a3 01 	sts	0x01A3, r27	; 0x8001a3 <vTopRaggiunti1+0x3>
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	df 90       	pop	r13
 386:	cf 90       	pop	r12
 388:	bf 90       	pop	r11
 38a:	af 90       	pop	r10
 38c:	9f 90       	pop	r9
 38e:	8f 90       	pop	r8
 390:	7f 90       	pop	r7
 392:	6f 90       	pop	r6
 394:	5f 90       	pop	r5
 396:	4f 90       	pop	r4
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <__vector_2>:

ISR(INT1_vect){
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	ef 93       	push	r30
 3c6:	ff 93       	push	r31
	Serial_Send(Kp);
 3c8:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <Kp+0x1>
 3cc:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <Kp>
 3d0:	93 2f       	mov	r25, r19
 3d2:	99 0f       	add	r25, r25
 3d4:	99 0b       	sbc	r25, r25
 3d6:	49 2f       	mov	r20, r25
 3d8:	59 2f       	mov	r21, r25
 3da:	69 2f       	mov	r22, r25
 3dc:	79 2f       	mov	r23, r25
 3de:	89 2f       	mov	r24, r25
 3e0:	0e 94 cc 03 	call	0x798	; 0x798 <Serial_Send_Int>
	Serial_Send("\t");
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 aa 03 	call	0x754	; 0x754 <Serial_Send_String>
	Serial_Send(OCR1A);
 3ec:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 3f0:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 3f4:	28 2f       	mov	r18, r24
 3f6:	39 2f       	mov	r19, r25
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 cc 03 	call	0x798	; 0x798 <Serial_Send_Int>
	SerialN();
 408:	0e 94 c9 04 	call	0x992	; 0x992 <SerialN>
}
 40c:	ff 91       	pop	r31
 40e:	ef 91       	pop	r30
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	bf 91       	pop	r27
 416:	af 91       	pop	r26
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	7f 91       	pop	r23
 41e:	6f 91       	pop	r22
 420:	5f 91       	pop	r21
 422:	4f 91       	pop	r20
 424:	3f 91       	pop	r19
 426:	2f 91       	pop	r18
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <main>:
#include "ADC.h"
int main(void)
{
	
	//init_millis(F_CPU);
	Serial_Init();
 432:	0e 94 87 03 	call	0x70e	; 0x70e <Serial_Init>
	InitADC();
 436:	0e 94 53 00 	call	0xa6	; 0xa6 <InitADC>
	Serial_Send("xd");
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	0e 94 aa 03 	call	0x754	; 0x754 <Serial_Send_String>
	SerialN();
 442:	0e 94 c9 04 	call	0x992	; 0x992 <SerialN>
	InitPWM();
 446:	0e 94 50 02 	call	0x4a0	; 0x4a0 <InitPWM>
	InitISR();
 44a:	0e 94 64 00 	call	0xc8	; 0xc8 <InitISR>
	DDRC=0;
 44e:	17 b8       	out	0x07, r1	; 7
	DDRD=0;
 450:	1a b8       	out	0x0a, r1	; 10
	Kp=0;
	Ki=0;
 452:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <Ki+0x1>
 456:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <Ki>
	Kd=0;
 45a:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <Kd+0x1>
 45e:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <Kd>
	setpoint[1]=1;
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	a0 e8       	ldi	r26, 0x80	; 128
 468:	bf e3       	ldi	r27, 0x3F	; 63
 46a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <setpoint+0x4>
 46e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <setpoint+0x5>
 472:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <setpoint+0x6>
 476:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <setpoint+0x7>

    while (1) 
    {
		for(int i=797;i>0;i--){
 47a:	8d e1       	ldi	r24, 0x1D	; 29
 47c:	93 e0       	ldi	r25, 0x03	; 3
			Kp=i;
 47e:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <Kp+0x1>
 482:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <Kp>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 486:	2a ea       	ldi	r18, 0xAA	; 170
 488:	36 ee       	ldi	r19, 0xE6	; 230
 48a:	46 e9       	ldi	r20, 0x96	; 150
 48c:	51 e0       	ldi	r21, 0x01	; 1
 48e:	21 50       	subi	r18, 0x01	; 1
 490:	30 40       	sbci	r19, 0x00	; 0
 492:	40 40       	sbci	r20, 0x00	; 0
 494:	50 40       	sbci	r21, 0x00	; 0
 496:	d9 f7       	brne	.-10     	; 0x48e <main+0x5c>
 498:	00 00       	nop
	Kd=0;
	setpoint[1]=1;

    while (1) 
    {
		for(int i=797;i>0;i--){
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	81 f7       	brne	.-32     	; 0x47e <main+0x4c>
 49e:	ed cf       	rjmp	.-38     	; 0x47a <main+0x48>

000004a0 <InitPWM>:
 4a0:	e0 e8       	ldi	r30, 0x80	; 128
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	83 6a       	ori	r24, 0xA3	; 163
 4a8:	80 83       	st	Z, r24
 4aa:	e1 e8       	ldi	r30, 0x81	; 129
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	8c 60       	ori	r24, 0x0C	; 12
 4b2:	80 83       	st	Z, r24
 4b4:	e0 eb       	ldi	r30, 0xB0	; 176
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	80 83       	st	Z, r24
 4bc:	e1 eb       	ldi	r30, 0xB1	; 177
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	8b 60       	ori	r24, 0x0B	; 11
 4c4:	80 83       	st	Z, r24
 4c6:	22 e0       	ldi	r18, 0x02	; 2
 4c8:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
 4cc:	8f ef       	ldi	r24, 0xFF	; 255
 4ce:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 4d2:	94 b5       	in	r25, 0x24	; 36
 4d4:	92 60       	ori	r25, 0x02	; 2
 4d6:	94 bd       	out	0x24, r25	; 36
 4d8:	95 b5       	in	r25, 0x25	; 37
 4da:	9b 60       	ori	r25, 0x0B	; 11
 4dc:	95 bd       	out	0x25, r25	; 37
 4de:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 4e2:	87 bd       	out	0x27, r24	; 39
 4e4:	86 bd       	out	0x26, r24	; 38
 4e6:	84 b9       	out	0x04, r24	; 4
 4e8:	ec e0       	ldi	r30, 0x0C	; 12
 4ea:	f2 e0       	ldi	r31, 0x02	; 2
 4ec:	14 82       	std	Z+4, r1	; 0x04
 4ee:	15 82       	std	Z+5, r1	; 0x05
 4f0:	16 82       	std	Z+6, r1	; 0x06
 4f2:	17 82       	std	Z+7, r1	; 0x07
 4f4:	10 86       	std	Z+8, r1	; 0x08
 4f6:	11 86       	std	Z+9, r1	; 0x09
 4f8:	12 86       	std	Z+10, r1	; 0x0a
 4fa:	13 86       	std	Z+11, r1	; 0x0b
 4fc:	14 86       	std	Z+12, r1	; 0x0c
 4fe:	15 86       	std	Z+13, r1	; 0x0d
 500:	16 86       	std	Z+14, r1	; 0x0e
 502:	17 86       	std	Z+15, r1	; 0x0f
 504:	10 8a       	std	Z+16, r1	; 0x10
 506:	11 8a       	std	Z+17, r1	; 0x11
 508:	12 8a       	std	Z+18, r1	; 0x12
 50a:	13 8a       	std	Z+19, r1	; 0x13
 50c:	08 95       	ret

0000050e <CalculatePID>:
 50e:	4f 92       	push	r4
 510:	5f 92       	push	r5
 512:	6f 92       	push	r6
 514:	7f 92       	push	r7
 516:	8f 92       	push	r8
 518:	9f 92       	push	r9
 51a:	af 92       	push	r10
 51c:	bf 92       	push	r11
 51e:	cf 92       	push	r12
 520:	df 92       	push	r13
 522:	ef 92       	push	r14
 524:	ff 92       	push	r15
 526:	0f 93       	push	r16
 528:	1f 93       	push	r17
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	ec 01       	movw	r28, r24
 530:	8c 01       	movw	r16, r24
 532:	00 0f       	add	r16, r16
 534:	11 1f       	adc	r17, r17
 536:	00 0f       	add	r16, r16
 538:	11 1f       	adc	r17, r17
 53a:	f8 01       	movw	r30, r16
 53c:	e0 5c       	subi	r30, 0xC0	; 192
 53e:	fe 4f       	sbci	r31, 0xFE	; 254
 540:	60 81       	ld	r22, Z
 542:	71 81       	ldd	r23, Z+1	; 0x01
 544:	82 81       	ldd	r24, Z+2	; 0x02
 546:	93 81       	ldd	r25, Z+3	; 0x03
 548:	f8 01       	movw	r30, r16
 54a:	e6 52       	subi	r30, 0x26	; 38
 54c:	fe 4f       	sbci	r31, 0xFE	; 254
 54e:	20 81       	ld	r18, Z
 550:	31 81       	ldd	r19, Z+1	; 0x01
 552:	42 81       	ldd	r20, Z+2	; 0x02
 554:	53 81       	ldd	r21, Z+3	; 0x03
 556:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__subsf3>
 55a:	98 01       	movw	r18, r16
 55c:	2a 53       	subi	r18, 0x3A	; 58
 55e:	3e 4f       	sbci	r19, 0xFE	; 254
 560:	79 01       	movw	r14, r18
 562:	d9 01       	movw	r26, r18
 564:	6d 93       	st	X+, r22
 566:	7d 93       	st	X+, r23
 568:	8d 93       	st	X+, r24
 56a:	9c 93       	st	X, r25
 56c:	13 97       	sbiw	r26, 0x03	; 3
 56e:	6d 91       	ld	r22, X+
 570:	7d 91       	ld	r23, X+
 572:	8d 91       	ld	r24, X+
 574:	9c 91       	ld	r25, X
 576:	f8 01       	movw	r30, r16
 578:	e4 5f       	subi	r30, 0xF4	; 244
 57a:	fd 4f       	sbci	r31, 0xFD	; 253
 57c:	6f 01       	movw	r12, r30
 57e:	80 80       	ld	r8, Z
 580:	91 80       	ldd	r9, Z+1	; 0x01
 582:	a2 80       	ldd	r10, Z+2	; 0x02
 584:	b3 80       	ldd	r11, Z+3	; 0x03
 586:	2f e6       	ldi	r18, 0x6F	; 111
 588:	32 e1       	ldi	r19, 0x12	; 18
 58a:	43 e0       	ldi	r20, 0x03	; 3
 58c:	5b e3       	ldi	r21, 0x3B	; 59
 58e:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 592:	a5 01       	movw	r20, r10
 594:	94 01       	movw	r18, r8
 596:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__addsf3>
 59a:	d6 01       	movw	r26, r12
 59c:	6d 93       	st	X+, r22
 59e:	7d 93       	st	X+, r23
 5a0:	8d 93       	st	X+, r24
 5a2:	9c 93       	st	X, r25
 5a4:	13 97       	sbiw	r26, 0x03	; 3
 5a6:	f7 01       	movw	r30, r14
 5a8:	60 81       	ld	r22, Z
 5aa:	71 81       	ldd	r23, Z+1	; 0x01
 5ac:	82 81       	ldd	r24, Z+2	; 0x02
 5ae:	93 81       	ldd	r25, Z+3	; 0x03
 5b0:	f8 01       	movw	r30, r16
 5b2:	e8 57       	subi	r30, 0x78	; 120
 5b4:	fe 4f       	sbci	r31, 0xFE	; 254
 5b6:	20 81       	ld	r18, Z
 5b8:	31 81       	ldd	r19, Z+1	; 0x01
 5ba:	42 81       	ldd	r20, Z+2	; 0x02
 5bc:	53 81       	ldd	r21, Z+3	; 0x03
 5be:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__subsf3>
 5c2:	2f e6       	ldi	r18, 0x6F	; 111
 5c4:	32 e1       	ldi	r19, 0x12	; 18
 5c6:	43 e0       	ldi	r20, 0x03	; 3
 5c8:	5b e3       	ldi	r21, 0x3B	; 59
 5ca:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__divsf3>
 5ce:	f8 01       	movw	r30, r16
 5d0:	ee 5d       	subi	r30, 0xDE	; 222
 5d2:	fe 4f       	sbci	r31, 0xFE	; 254
 5d4:	60 83       	st	Z, r22
 5d6:	71 83       	std	Z+1, r23	; 0x01
 5d8:	82 83       	std	Z+2, r24	; 0x02
 5da:	93 83       	std	Z+3, r25	; 0x03
 5dc:	d7 01       	movw	r26, r14
 5de:	4d 90       	ld	r4, X+
 5e0:	5d 90       	ld	r5, X+
 5e2:	6d 90       	ld	r6, X+
 5e4:	7c 90       	ld	r7, X
 5e6:	d6 01       	movw	r26, r12
 5e8:	cd 90       	ld	r12, X+
 5ea:	dd 90       	ld	r13, X+
 5ec:	ed 90       	ld	r14, X+
 5ee:	fc 90       	ld	r15, X
 5f0:	80 80       	ld	r8, Z
 5f2:	91 80       	ldd	r9, Z+1	; 0x01
 5f4:	a2 80       	ldd	r10, Z+2	; 0x02
 5f6:	b3 80       	ldd	r11, Z+3	; 0x03
 5f8:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <Kp>
 5fc:	70 91 f1 01 	lds	r23, 0x01F1	; 0x8001f1 <Kp+0x1>
 600:	07 2e       	mov	r0, r23
 602:	00 0c       	add	r0, r0
 604:	88 0b       	sbc	r24, r24
 606:	99 0b       	sbc	r25, r25
 608:	0e 94 e7 05 	call	0xbce	; 0xbce <__floatsisf>
 60c:	a3 01       	movw	r20, r6
 60e:	92 01       	movw	r18, r4
 610:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 614:	2b 01       	movw	r4, r22
 616:	3c 01       	movw	r6, r24
 618:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <Ki>
 61c:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <Ki+0x1>
 620:	07 2e       	mov	r0, r23
 622:	00 0c       	add	r0, r0
 624:	88 0b       	sbc	r24, r24
 626:	99 0b       	sbc	r25, r25
 628:	0e 94 e7 05 	call	0xbce	; 0xbce <__floatsisf>
 62c:	a7 01       	movw	r20, r14
 62e:	96 01       	movw	r18, r12
 630:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 634:	9b 01       	movw	r18, r22
 636:	ac 01       	movw	r20, r24
 638:	c3 01       	movw	r24, r6
 63a:	b2 01       	movw	r22, r4
 63c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__addsf3>
 640:	6b 01       	movw	r12, r22
 642:	7c 01       	movw	r14, r24
 644:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <Kd>
 648:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <Kd+0x1>
 64c:	07 2e       	mov	r0, r23
 64e:	00 0c       	add	r0, r0
 650:	88 0b       	sbc	r24, r24
 652:	99 0b       	sbc	r25, r25
 654:	0e 94 e7 05 	call	0xbce	; 0xbce <__floatsisf>
 658:	a5 01       	movw	r20, r10
 65a:	94 01       	movw	r18, r8
 65c:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3>
 660:	9b 01       	movw	r18, r22
 662:	ac 01       	movw	r20, r24
 664:	c7 01       	movw	r24, r14
 666:	b6 01       	movw	r22, r12
 668:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__addsf3>
 66c:	0e 94 af 05 	call	0xb5e	; 0xb5e <__fixsfsi>
 670:	fe 01       	movw	r30, r28
 672:	ee 0f       	add	r30, r30
 674:	ff 1f       	adc	r31, r31
 676:	ea 50       	subi	r30, 0x0A	; 10
 678:	fe 4f       	sbci	r31, 0xFE	; 254
 67a:	71 83       	std	Z+1, r23	; 0x01
 67c:	60 83       	st	Z, r22
 67e:	80 81       	ld	r24, Z
 680:	91 81       	ldd	r25, Z+1	; 0x01
 682:	99 23       	and	r25, r25
 684:	3c f4       	brge	.+14     	; 0x694 <CalculatePID+0x186>
 686:	fe 01       	movw	r30, r28
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	ea 50       	subi	r30, 0x0A	; 10
 68e:	fe 4f       	sbci	r31, 0xFE	; 254
 690:	11 82       	std	Z+1, r1	; 0x01
 692:	10 82       	st	Z, r1
 694:	fe 01       	movw	r30, r28
 696:	ee 0f       	add	r30, r30
 698:	ff 1f       	adc	r31, r31
 69a:	ea 50       	subi	r30, 0x0A	; 10
 69c:	fe 4f       	sbci	r31, 0xFE	; 254
 69e:	80 81       	ld	r24, Z
 6a0:	91 81       	ldd	r25, Z+1	; 0x01
 6a2:	81 15       	cp	r24, r1
 6a4:	94 40       	sbci	r25, 0x04	; 4
 6a6:	4c f0       	brlt	.+18     	; 0x6ba <CalculatePID+0x1ac>
 6a8:	fe 01       	movw	r30, r28
 6aa:	ee 0f       	add	r30, r30
 6ac:	ff 1f       	adc	r31, r31
 6ae:	ea 50       	subi	r30, 0x0A	; 10
 6b0:	fe 4f       	sbci	r31, 0xFE	; 254
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	93 e0       	ldi	r25, 0x03	; 3
 6b6:	91 83       	std	Z+1, r25	; 0x01
 6b8:	80 83       	st	Z, r24
 6ba:	ce 01       	movw	r24, r28
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	fc 01       	movw	r30, r24
 6c6:	ea 53       	subi	r30, 0x3A	; 58
 6c8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ca:	40 81       	ld	r20, Z
 6cc:	51 81       	ldd	r21, Z+1	; 0x01
 6ce:	62 81       	ldd	r22, Z+2	; 0x02
 6d0:	73 81       	ldd	r23, Z+3	; 0x03
 6d2:	fc 01       	movw	r30, r24
 6d4:	e8 57       	subi	r30, 0x78	; 120
 6d6:	fe 4f       	sbci	r31, 0xFE	; 254
 6d8:	40 83       	st	Z, r20
 6da:	51 83       	std	Z+1, r21	; 0x01
 6dc:	62 83       	std	Z+2, r22	; 0x02
 6de:	73 83       	std	Z+3, r23	; 0x03
 6e0:	cc 0f       	add	r28, r28
 6e2:	dd 1f       	adc	r29, r29
 6e4:	ca 50       	subi	r28, 0x0A	; 10
 6e6:	de 4f       	sbci	r29, 0xFE	; 254
 6e8:	88 81       	ld	r24, Y
 6ea:	99 81       	ldd	r25, Y+1	; 0x01
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	1f 91       	pop	r17
 6f2:	0f 91       	pop	r16
 6f4:	ff 90       	pop	r15
 6f6:	ef 90       	pop	r14
 6f8:	df 90       	pop	r13
 6fa:	cf 90       	pop	r12
 6fc:	bf 90       	pop	r11
 6fe:	af 90       	pop	r10
 700:	9f 90       	pop	r9
 702:	8f 90       	pop	r8
 704:	7f 90       	pop	r7
 706:	6f 90       	pop	r6
 708:	5f 90       	pop	r5
 70a:	4f 90       	pop	r4
 70c:	08 95       	ret

0000070e <Serial_Init>:
}
unsigned char Serial_Rx( void )
{
	while ( !(UCSR0A & (1<<RXC0)) );
	return UDR0;
}
 70e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <BAUD0>
 712:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <BAUD0+0x1>
 716:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <BAUD0+0x2>
 71a:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <BAUD0+0x3>
 71e:	89 2f       	mov	r24, r25
 720:	9a 2f       	mov	r25, r26
 722:	ab 2f       	mov	r26, r27
 724:	bb 27       	eor	r27, r27
 726:	a7 fd       	sbrc	r26, 7
 728:	ba 95       	dec	r27
 72a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 72e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <BAUD0>
 732:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 736:	88 e1       	ldi	r24, 0x18	; 24
 738:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 73c:	86 e0       	ldi	r24, 0x06	; 6
 73e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 742:	08 95       	ret

00000744 <Serial_Tx>:
 744:	e0 ec       	ldi	r30, 0xC0	; 192
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	90 81       	ld	r25, Z
 74a:	95 ff       	sbrs	r25, 5
 74c:	fd cf       	rjmp	.-6      	; 0x748 <Serial_Tx+0x4>
 74e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 752:	08 95       	ret

00000754 <Serial_Send_String>:
	}
}


void Serial_Send_String(char *string1)
{
 754:	ef 92       	push	r14
 756:	ff 92       	push	r15
 758:	0f 93       	push	r16
 75a:	1f 93       	push	r17
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	8c 01       	movw	r16, r24
 762:	7c 01       	movw	r14, r24
	int i=0;
	for(i=0;i<strlen(string1);i++)
 764:	c0 e0       	ldi	r28, 0x00	; 0
 766:	d0 e0       	ldi	r29, 0x00	; 0
 768:	06 c0       	rjmp	.+12     	; 0x776 <Serial_Send_String+0x22>
	{
		Serial_Tx(string1[i]);
 76a:	f7 01       	movw	r30, r14
 76c:	81 91       	ld	r24, Z+
 76e:	7f 01       	movw	r14, r30
 770:	0e 94 a2 03 	call	0x744	; 0x744 <Serial_Tx>


void Serial_Send_String(char *string1)
{
	int i=0;
	for(i=0;i<strlen(string1);i++)
 774:	21 96       	adiw	r28, 0x01	; 1
 776:	f8 01       	movw	r30, r16
 778:	01 90       	ld	r0, Z+
 77a:	00 20       	and	r0, r0
 77c:	e9 f7       	brne	.-6      	; 0x778 <Serial_Send_String+0x24>
 77e:	31 97       	sbiw	r30, 0x01	; 1
 780:	e0 1b       	sub	r30, r16
 782:	f1 0b       	sbc	r31, r17
 784:	ce 17       	cp	r28, r30
 786:	df 07       	cpc	r29, r31
 788:	80 f3       	brcs	.-32     	; 0x76a <Serial_Send_String+0x16>
	{
		Serial_Tx(string1[i]);
	}
}
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	ff 90       	pop	r15
 794:	ef 90       	pop	r14
 796:	08 95       	ret

00000798 <Serial_Send_Int>:
	while ( !(UCSR0A & (1<<RXC0)) );
	return UDR0;
}

void Serial_Send_Int(int64_t num)
{
 798:	2f 92       	push	r2
 79a:	3f 92       	push	r3
 79c:	4f 92       	push	r4
 79e:	5f 92       	push	r5
 7a0:	6f 92       	push	r6
 7a2:	7f 92       	push	r7
 7a4:	8f 92       	push	r8
 7a6:	9f 92       	push	r9
 7a8:	af 92       	push	r10
 7aa:	bf 92       	push	r11
 7ac:	cf 92       	push	r12
 7ae:	df 92       	push	r13
 7b0:	ef 92       	push	r14
 7b2:	ff 92       	push	r15
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	cf 93       	push	r28
 7ba:	df 93       	push	r29
 7bc:	cd b7       	in	r28, 0x3d	; 61
 7be:	de b7       	in	r29, 0x3e	; 62
 7c0:	c9 54       	subi	r28, 0x49	; 73
 7c2:	d1 09       	sbc	r29, r1
 7c4:	0f b6       	in	r0, 0x3f	; 63
 7c6:	f8 94       	cli
 7c8:	de bf       	out	0x3e, r29	; 62
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	cd bf       	out	0x3d, r28	; 61
 7ce:	22 2e       	mov	r2, r18
 7d0:	33 2e       	mov	r3, r19
 7d2:	04 2f       	mov	r16, r20
 7d4:	22 96       	adiw	r28, 0x02	; 2
 7d6:	5f af       	std	Y+63, r21	; 0x3f
 7d8:	22 97       	sbiw	r28, 0x02	; 2
 7da:	86 2e       	mov	r8, r22
 7dc:	17 2f       	mov	r17, r23
 7de:	23 96       	adiw	r28, 0x03	; 3
 7e0:	8f af       	std	Y+63, r24	; 0x3f
 7e2:	23 97       	sbiw	r28, 0x03	; 3
 7e4:	24 96       	adiw	r28, 0x04	; 4
 7e6:	9f af       	std	Y+63, r25	; 0x3f
 7e8:	24 97       	sbiw	r28, 0x04	; 4
	if(num<0)
 7ea:	a0 e0       	ldi	r26, 0x00	; 0
 7ec:	0e 94 c2 07 	call	0xf84	; 0xf84 <__cmpdi2_s8>
 7f0:	0c f0       	brlt	.+2      	; 0x7f4 <Serial_Send_Int+0x5c>
 7f2:	a6 c0       	rjmp	.+332    	; 0x940 <__stack+0x41>
	{
		Serial_Send_String("-");
 7f4:	85 e0       	ldi	r24, 0x05	; 5
 7f6:	91 e0       	ldi	r25, 0x01	; 1
 7f8:	0e 94 aa 03 	call	0x754	; 0x754 <Serial_Send_String>
		num=-num;
 7fc:	22 2d       	mov	r18, r2
 7fe:	33 2d       	mov	r19, r3
 800:	40 2f       	mov	r20, r16
 802:	22 96       	adiw	r28, 0x02	; 2
 804:	5f ad       	ldd	r21, Y+63	; 0x3f
 806:	22 97       	sbiw	r28, 0x02	; 2
 808:	68 2d       	mov	r22, r8
 80a:	71 2f       	mov	r23, r17
 80c:	23 96       	adiw	r28, 0x03	; 3
 80e:	8f ad       	ldd	r24, Y+63	; 0x3f
 810:	23 97       	sbiw	r28, 0x03	; 3
 812:	24 96       	adiw	r28, 0x04	; 4
 814:	9f ad       	ldd	r25, Y+63	; 0x3f
 816:	24 97       	sbiw	r28, 0x04	; 4
 818:	0e 94 7b 07 	call	0xef6	; 0xef6 <__negdi2>
 81c:	22 2e       	mov	r2, r18
 81e:	33 2e       	mov	r3, r19
 820:	04 2f       	mov	r16, r20
 822:	22 96       	adiw	r28, 0x02	; 2
 824:	5f af       	std	Y+63, r21	; 0x3f
 826:	22 97       	sbiw	r28, 0x02	; 2
 828:	86 2e       	mov	r8, r22
 82a:	17 2f       	mov	r17, r23
 82c:	23 96       	adiw	r28, 0x03	; 3
 82e:	8f af       	std	Y+63, r24	; 0x3f
 830:	23 97       	sbiw	r28, 0x03	; 3
 832:	24 96       	adiw	r28, 0x04	; 4
 834:	9f af       	std	Y+63, r25	; 0x3f
 836:	24 97       	sbiw	r28, 0x04	; 4
	}
	if(num==0){Serial_Tx('0');}
 838:	a0 e0       	ldi	r26, 0x00	; 0
 83a:	0e 94 c2 07 	call	0xf84	; 0xf84 <__cmpdi2_s8>
 83e:	21 f4       	brne	.+8      	; 0x848 <Serial_Send_Int+0xb0>
 840:	80 e3       	ldi	r24, 0x30	; 48
 842:	0e 94 a2 03 	call	0x744	; 0x744 <Serial_Tx>
 846:	8b c0       	rjmp	.+278    	; 0x95e <__stack+0x5f>
 848:	ce 01       	movw	r24, r28
 84a:	01 96       	adiw	r24, 0x01	; 1
 84c:	2c 01       	movw	r4, r24
 84e:	3e 01       	movw	r6, r28
 850:	91 e2       	ldi	r25, 0x21	; 33
 852:	69 0e       	add	r6, r25
 854:	71 1c       	adc	r7, r1
	while ( !(UCSR0A & (1<<RXC0)) );
	return UDR0;
}

void Serial_Send_Int(int64_t num)
{
 856:	f2 01       	movw	r30, r4
	if(num==0){Serial_Tx('0');}
	else
	{
		char str[64];				// definisce una stringa sulla quale convertire il numero da trasmettere (max 10 cifre)
		char i;						// contatore ciclo
		for(i=0;i<32;i++) str[i]=0; // cancella la stringa
 858:	11 92       	st	Z+, r1
 85a:	e6 15       	cp	r30, r6
 85c:	f7 05       	cpc	r31, r7
 85e:	e1 f7       	brne	.-8      	; 0x858 <Serial_Send_Int+0xc0>
 860:	0f 2e       	mov	r0, r31
 862:	ff e1       	ldi	r31, 0x1F	; 31
 864:	9f 2e       	mov	r9, r31
 866:	f0 2d       	mov	r31, r0
		i=31;
		while (num)
		{
			str[i]=num%10+'0';		// converte il numero da trasmettere in una stringa (dalla cifra meno significativa)
 868:	28 96       	adiw	r28, 0x08	; 8
 86a:	5f ae       	std	Y+63, r5	; 0x3f
 86c:	4e ae       	std	Y+62, r4	; 0x3e
 86e:	28 97       	sbiw	r28, 0x08	; 8
 870:	2a 96       	adiw	r28, 0x0a	; 10
 872:	7f ae       	std	Y+63, r7	; 0x3f
 874:	6e ae       	std	Y+62, r6	; 0x3e
 876:	2a 97       	sbiw	r28, 0x0a	; 10
 878:	79 2c       	mov	r7, r9
 87a:	50 2e       	mov	r5, r16
 87c:	91 2e       	mov	r9, r17
 87e:	e1 e0       	ldi	r30, 0x01	; 1
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	ec 0f       	add	r30, r28
 884:	fd 1f       	adc	r31, r29
 886:	e7 0d       	add	r30, r7
 888:	f1 1d       	adc	r31, r1
 88a:	26 96       	adiw	r28, 0x06	; 6
 88c:	ff af       	std	Y+63, r31	; 0x3f
 88e:	ee af       	std	Y+62, r30	; 0x3e
 890:	26 97       	sbiw	r28, 0x06	; 6
 892:	0f 2e       	mov	r0, r31
 894:	fa e0       	ldi	r31, 0x0A	; 10
 896:	af 2e       	mov	r10, r31
 898:	f0 2d       	mov	r31, r0
 89a:	b1 2c       	mov	r11, r1
 89c:	c1 2c       	mov	r12, r1
 89e:	d1 2c       	mov	r13, r1
 8a0:	e1 2c       	mov	r14, r1
 8a2:	f1 2c       	mov	r15, r1
 8a4:	00 e0       	ldi	r16, 0x00	; 0
 8a6:	10 e0       	ldi	r17, 0x00	; 0
 8a8:	22 2d       	mov	r18, r2
 8aa:	33 2d       	mov	r19, r3
 8ac:	45 2d       	mov	r20, r5
 8ae:	22 96       	adiw	r28, 0x02	; 2
 8b0:	5f ad       	ldd	r21, Y+63	; 0x3f
 8b2:	22 97       	sbiw	r28, 0x02	; 2
 8b4:	68 2d       	mov	r22, r8
 8b6:	79 2d       	mov	r23, r9
 8b8:	23 96       	adiw	r28, 0x03	; 3
 8ba:	8f ad       	ldd	r24, Y+63	; 0x3f
 8bc:	23 97       	sbiw	r28, 0x03	; 3
 8be:	24 96       	adiw	r28, 0x04	; 4
 8c0:	9f ad       	ldd	r25, Y+63	; 0x3f
 8c2:	24 97       	sbiw	r28, 0x04	; 4
 8c4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__moddi3>
 8c8:	20 5d       	subi	r18, 0xD0	; 208
 8ca:	26 96       	adiw	r28, 0x06	; 6
 8cc:	ee ad       	ldd	r30, Y+62	; 0x3e
 8ce:	ff ad       	ldd	r31, Y+63	; 0x3f
 8d0:	26 97       	sbiw	r28, 0x06	; 6
 8d2:	20 83       	st	Z, r18
			num/=10;
 8d4:	22 2d       	mov	r18, r2
 8d6:	33 2d       	mov	r19, r3
 8d8:	45 2d       	mov	r20, r5
 8da:	22 96       	adiw	r28, 0x02	; 2
 8dc:	5f ad       	ldd	r21, Y+63	; 0x3f
 8de:	22 97       	sbiw	r28, 0x02	; 2
 8e0:	68 2d       	mov	r22, r8
 8e2:	79 2d       	mov	r23, r9
 8e4:	23 96       	adiw	r28, 0x03	; 3
 8e6:	8f ad       	ldd	r24, Y+63	; 0x3f
 8e8:	23 97       	sbiw	r28, 0x03	; 3
 8ea:	24 96       	adiw	r28, 0x04	; 4
 8ec:	9f ad       	ldd	r25, Y+63	; 0x3f
 8ee:	24 97       	sbiw	r28, 0x04	; 4
 8f0:	0e 94 ed 06 	call	0xdda	; 0xdda <__divdi3>
 8f4:	22 2e       	mov	r2, r18
 8f6:	33 2e       	mov	r3, r19
 8f8:	54 2e       	mov	r5, r20
 8fa:	22 96       	adiw	r28, 0x02	; 2
 8fc:	5f af       	std	Y+63, r21	; 0x3f
 8fe:	22 97       	sbiw	r28, 0x02	; 2
 900:	86 2e       	mov	r8, r22
 902:	97 2e       	mov	r9, r23
 904:	23 96       	adiw	r28, 0x03	; 3
 906:	8f af       	std	Y+63, r24	; 0x3f
 908:	23 97       	sbiw	r28, 0x03	; 3
 90a:	24 96       	adiw	r28, 0x04	; 4
 90c:	9f af       	std	Y+63, r25	; 0x3f
 90e:	24 97       	sbiw	r28, 0x04	; 4
			i--;
 910:	7a 94       	dec	r7
	{
		char str[64];				// definisce una stringa sulla quale convertire il numero da trasmettere (max 10 cifre)
		char i;						// contatore ciclo
		for(i=0;i<32;i++) str[i]=0; // cancella la stringa
		i=31;
		while (num)
 912:	a0 e0       	ldi	r26, 0x00	; 0
 914:	0e 94 c2 07 	call	0xf84	; 0xf84 <__cmpdi2_s8>
 918:	09 f0       	breq	.+2      	; 0x91c <__stack+0x1d>
 91a:	b1 cf       	rjmp	.-158    	; 0x87e <Serial_Send_Int+0xe6>
 91c:	28 96       	adiw	r28, 0x08	; 8
 91e:	4e ac       	ldd	r4, Y+62	; 0x3e
 920:	5f ac       	ldd	r5, Y+63	; 0x3f
 922:	28 97       	sbiw	r28, 0x08	; 8
 924:	2a 96       	adiw	r28, 0x0a	; 10
 926:	6e ac       	ldd	r6, Y+62	; 0x3e
 928:	7f ac       	ldd	r7, Y+63	; 0x3f
 92a:	2a 97       	sbiw	r28, 0x0a	; 10
			str[i]=num%10+'0';		// converte il numero da trasmettere in una stringa (dalla cifra meno significativa)
			num/=10;
			i--;
		}
		for (i=0;i<32;i++)			// invia la stringa un carattere alla volta
		if (str[i]) Serial_Tx(str[i]);
 92c:	f2 01       	movw	r30, r4
 92e:	81 91       	ld	r24, Z+
 930:	2f 01       	movw	r4, r30
 932:	81 11       	cpse	r24, r1
 934:	0e 94 a2 03 	call	0x744	; 0x744 <Serial_Tx>
		{
			str[i]=num%10+'0';		// converte il numero da trasmettere in una stringa (dalla cifra meno significativa)
			num/=10;
			i--;
		}
		for (i=0;i<32;i++)			// invia la stringa un carattere alla volta
 938:	46 14       	cp	r4, r6
 93a:	57 04       	cpc	r5, r7
 93c:	b9 f7       	brne	.-18     	; 0x92c <__stack+0x2d>
 93e:	0f c0       	rjmp	.+30     	; 0x95e <__stack+0x5f>
	if(num<0)
	{
		Serial_Send_String("-");
		num=-num;
	}
	if(num==0){Serial_Tx('0');}
 940:	22 96       	adiw	r28, 0x02	; 2
 942:	5f ad       	ldd	r21, Y+63	; 0x3f
 944:	22 97       	sbiw	r28, 0x02	; 2
 946:	23 96       	adiw	r28, 0x03	; 3
 948:	8f ad       	ldd	r24, Y+63	; 0x3f
 94a:	23 97       	sbiw	r28, 0x03	; 3
 94c:	24 96       	adiw	r28, 0x04	; 4
 94e:	9f ad       	ldd	r25, Y+63	; 0x3f
 950:	24 97       	sbiw	r28, 0x04	; 4
 952:	a0 e0       	ldi	r26, 0x00	; 0
 954:	0e 94 c2 07 	call	0xf84	; 0xf84 <__cmpdi2_s8>
 958:	09 f0       	breq	.+2      	; 0x95c <__stack+0x5d>
 95a:	76 cf       	rjmp	.-276    	; 0x848 <Serial_Send_Int+0xb0>
 95c:	71 cf       	rjmp	.-286    	; 0x840 <Serial_Send_Int+0xa8>
			i--;
		}
		for (i=0;i<32;i++)			// invia la stringa un carattere alla volta
		if (str[i]) Serial_Tx(str[i]);
	}
}
 95e:	c7 5b       	subi	r28, 0xB7	; 183
 960:	df 4f       	sbci	r29, 0xFF	; 255
 962:	0f b6       	in	r0, 0x3f	; 63
 964:	f8 94       	cli
 966:	de bf       	out	0x3e, r29	; 62
 968:	0f be       	out	0x3f, r0	; 63
 96a:	cd bf       	out	0x3d, r28	; 61
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	1f 91       	pop	r17
 972:	0f 91       	pop	r16
 974:	ff 90       	pop	r15
 976:	ef 90       	pop	r14
 978:	df 90       	pop	r13
 97a:	cf 90       	pop	r12
 97c:	bf 90       	pop	r11
 97e:	af 90       	pop	r10
 980:	9f 90       	pop	r9
 982:	8f 90       	pop	r8
 984:	7f 90       	pop	r7
 986:	6f 90       	pop	r6
 988:	5f 90       	pop	r5
 98a:	4f 90       	pop	r4
 98c:	3f 90       	pop	r3
 98e:	2f 90       	pop	r2
 990:	08 95       	ret

00000992 <SerialN>:
		Serial_Tx(string1[i]);
	}
}
void SerialN()
{
	Serial_Tx(13);
 992:	8d e0       	ldi	r24, 0x0D	; 13
 994:	0e 94 a2 03 	call	0x744	; 0x744 <Serial_Tx>
	Serial_Tx(10);
 998:	8a e0       	ldi	r24, 0x0A	; 10
 99a:	0e 94 a2 03 	call	0x744	; 0x744 <Serial_Tx>
 99e:	08 95       	ret

000009a0 <__subsf3>:
 9a0:	50 58       	subi	r21, 0x80	; 128

000009a2 <__addsf3>:
 9a2:	bb 27       	eor	r27, r27
 9a4:	aa 27       	eor	r26, r26
 9a6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__addsf3x>
 9aa:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__fp_round>
 9ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fp_pscA>
 9b2:	38 f0       	brcs	.+14     	; 0x9c2 <__addsf3+0x20>
 9b4:	0e 94 32 06 	call	0xc64	; 0xc64 <__fp_pscB>
 9b8:	20 f0       	brcs	.+8      	; 0x9c2 <__addsf3+0x20>
 9ba:	39 f4       	brne	.+14     	; 0x9ca <__addsf3+0x28>
 9bc:	9f 3f       	cpi	r25, 0xFF	; 255
 9be:	19 f4       	brne	.+6      	; 0x9c6 <__addsf3+0x24>
 9c0:	26 f4       	brtc	.+8      	; 0x9ca <__addsf3+0x28>
 9c2:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_nan>
 9c6:	0e f4       	brtc	.+2      	; 0x9ca <__addsf3+0x28>
 9c8:	e0 95       	com	r30
 9ca:	e7 fb       	bst	r30, 7
 9cc:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_inf>

000009d0 <__addsf3x>:
 9d0:	e9 2f       	mov	r30, r25
 9d2:	0e 94 4a 06 	call	0xc94	; 0xc94 <__fp_split3>
 9d6:	58 f3       	brcs	.-42     	; 0x9ae <__addsf3+0xc>
 9d8:	ba 17       	cp	r27, r26
 9da:	62 07       	cpc	r22, r18
 9dc:	73 07       	cpc	r23, r19
 9de:	84 07       	cpc	r24, r20
 9e0:	95 07       	cpc	r25, r21
 9e2:	20 f0       	brcs	.+8      	; 0x9ec <__addsf3x+0x1c>
 9e4:	79 f4       	brne	.+30     	; 0xa04 <__addsf3x+0x34>
 9e6:	a6 f5       	brtc	.+104    	; 0xa50 <__addsf3x+0x80>
 9e8:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_zero>
 9ec:	0e f4       	brtc	.+2      	; 0x9f0 <__addsf3x+0x20>
 9ee:	e0 95       	com	r30
 9f0:	0b 2e       	mov	r0, r27
 9f2:	ba 2f       	mov	r27, r26
 9f4:	a0 2d       	mov	r26, r0
 9f6:	0b 01       	movw	r0, r22
 9f8:	b9 01       	movw	r22, r18
 9fa:	90 01       	movw	r18, r0
 9fc:	0c 01       	movw	r0, r24
 9fe:	ca 01       	movw	r24, r20
 a00:	a0 01       	movw	r20, r0
 a02:	11 24       	eor	r1, r1
 a04:	ff 27       	eor	r31, r31
 a06:	59 1b       	sub	r21, r25
 a08:	99 f0       	breq	.+38     	; 0xa30 <__addsf3x+0x60>
 a0a:	59 3f       	cpi	r21, 0xF9	; 249
 a0c:	50 f4       	brcc	.+20     	; 0xa22 <__addsf3x+0x52>
 a0e:	50 3e       	cpi	r21, 0xE0	; 224
 a10:	68 f1       	brcs	.+90     	; 0xa6c <__addsf3x+0x9c>
 a12:	1a 16       	cp	r1, r26
 a14:	f0 40       	sbci	r31, 0x00	; 0
 a16:	a2 2f       	mov	r26, r18
 a18:	23 2f       	mov	r18, r19
 a1a:	34 2f       	mov	r19, r20
 a1c:	44 27       	eor	r20, r20
 a1e:	58 5f       	subi	r21, 0xF8	; 248
 a20:	f3 cf       	rjmp	.-26     	; 0xa08 <__addsf3x+0x38>
 a22:	46 95       	lsr	r20
 a24:	37 95       	ror	r19
 a26:	27 95       	ror	r18
 a28:	a7 95       	ror	r26
 a2a:	f0 40       	sbci	r31, 0x00	; 0
 a2c:	53 95       	inc	r21
 a2e:	c9 f7       	brne	.-14     	; 0xa22 <__addsf3x+0x52>
 a30:	7e f4       	brtc	.+30     	; 0xa50 <__addsf3x+0x80>
 a32:	1f 16       	cp	r1, r31
 a34:	ba 0b       	sbc	r27, r26
 a36:	62 0b       	sbc	r22, r18
 a38:	73 0b       	sbc	r23, r19
 a3a:	84 0b       	sbc	r24, r20
 a3c:	ba f0       	brmi	.+46     	; 0xa6c <__addsf3x+0x9c>
 a3e:	91 50       	subi	r25, 0x01	; 1
 a40:	a1 f0       	breq	.+40     	; 0xa6a <__addsf3x+0x9a>
 a42:	ff 0f       	add	r31, r31
 a44:	bb 1f       	adc	r27, r27
 a46:	66 1f       	adc	r22, r22
 a48:	77 1f       	adc	r23, r23
 a4a:	88 1f       	adc	r24, r24
 a4c:	c2 f7       	brpl	.-16     	; 0xa3e <__addsf3x+0x6e>
 a4e:	0e c0       	rjmp	.+28     	; 0xa6c <__addsf3x+0x9c>
 a50:	ba 0f       	add	r27, r26
 a52:	62 1f       	adc	r22, r18
 a54:	73 1f       	adc	r23, r19
 a56:	84 1f       	adc	r24, r20
 a58:	48 f4       	brcc	.+18     	; 0xa6c <__addsf3x+0x9c>
 a5a:	87 95       	ror	r24
 a5c:	77 95       	ror	r23
 a5e:	67 95       	ror	r22
 a60:	b7 95       	ror	r27
 a62:	f7 95       	ror	r31
 a64:	9e 3f       	cpi	r25, 0xFE	; 254
 a66:	08 f0       	brcs	.+2      	; 0xa6a <__addsf3x+0x9a>
 a68:	b0 cf       	rjmp	.-160    	; 0x9ca <__addsf3+0x28>
 a6a:	93 95       	inc	r25
 a6c:	88 0f       	add	r24, r24
 a6e:	08 f0       	brcs	.+2      	; 0xa72 <__addsf3x+0xa2>
 a70:	99 27       	eor	r25, r25
 a72:	ee 0f       	add	r30, r30
 a74:	97 95       	ror	r25
 a76:	87 95       	ror	r24
 a78:	08 95       	ret

00000a7a <__divsf3>:
 a7a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__divsf3x>
 a7e:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__fp_round>
 a82:	0e 94 32 06 	call	0xc64	; 0xc64 <__fp_pscB>
 a86:	58 f0       	brcs	.+22     	; 0xa9e <__divsf3+0x24>
 a88:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fp_pscA>
 a8c:	40 f0       	brcs	.+16     	; 0xa9e <__divsf3+0x24>
 a8e:	29 f4       	brne	.+10     	; 0xa9a <__divsf3+0x20>
 a90:	5f 3f       	cpi	r21, 0xFF	; 255
 a92:	29 f0       	breq	.+10     	; 0xa9e <__divsf3+0x24>
 a94:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_inf>
 a98:	51 11       	cpse	r21, r1
 a9a:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__fp_szero>
 a9e:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_nan>

00000aa2 <__divsf3x>:
 aa2:	0e 94 4a 06 	call	0xc94	; 0xc94 <__fp_split3>
 aa6:	68 f3       	brcs	.-38     	; 0xa82 <__divsf3+0x8>

00000aa8 <__divsf3_pse>:
 aa8:	99 23       	and	r25, r25
 aaa:	b1 f3       	breq	.-20     	; 0xa98 <__divsf3+0x1e>
 aac:	55 23       	and	r21, r21
 aae:	91 f3       	breq	.-28     	; 0xa94 <__divsf3+0x1a>
 ab0:	95 1b       	sub	r25, r21
 ab2:	55 0b       	sbc	r21, r21
 ab4:	bb 27       	eor	r27, r27
 ab6:	aa 27       	eor	r26, r26
 ab8:	62 17       	cp	r22, r18
 aba:	73 07       	cpc	r23, r19
 abc:	84 07       	cpc	r24, r20
 abe:	38 f0       	brcs	.+14     	; 0xace <__divsf3_pse+0x26>
 ac0:	9f 5f       	subi	r25, 0xFF	; 255
 ac2:	5f 4f       	sbci	r21, 0xFF	; 255
 ac4:	22 0f       	add	r18, r18
 ac6:	33 1f       	adc	r19, r19
 ac8:	44 1f       	adc	r20, r20
 aca:	aa 1f       	adc	r26, r26
 acc:	a9 f3       	breq	.-22     	; 0xab8 <__divsf3_pse+0x10>
 ace:	35 d0       	rcall	.+106    	; 0xb3a <__divsf3_pse+0x92>
 ad0:	0e 2e       	mov	r0, r30
 ad2:	3a f0       	brmi	.+14     	; 0xae2 <__divsf3_pse+0x3a>
 ad4:	e0 e8       	ldi	r30, 0x80	; 128
 ad6:	32 d0       	rcall	.+100    	; 0xb3c <__divsf3_pse+0x94>
 ad8:	91 50       	subi	r25, 0x01	; 1
 ada:	50 40       	sbci	r21, 0x00	; 0
 adc:	e6 95       	lsr	r30
 ade:	00 1c       	adc	r0, r0
 ae0:	ca f7       	brpl	.-14     	; 0xad4 <__divsf3_pse+0x2c>
 ae2:	2b d0       	rcall	.+86     	; 0xb3a <__divsf3_pse+0x92>
 ae4:	fe 2f       	mov	r31, r30
 ae6:	29 d0       	rcall	.+82     	; 0xb3a <__divsf3_pse+0x92>
 ae8:	66 0f       	add	r22, r22
 aea:	77 1f       	adc	r23, r23
 aec:	88 1f       	adc	r24, r24
 aee:	bb 1f       	adc	r27, r27
 af0:	26 17       	cp	r18, r22
 af2:	37 07       	cpc	r19, r23
 af4:	48 07       	cpc	r20, r24
 af6:	ab 07       	cpc	r26, r27
 af8:	b0 e8       	ldi	r27, 0x80	; 128
 afa:	09 f0       	breq	.+2      	; 0xafe <__divsf3_pse+0x56>
 afc:	bb 0b       	sbc	r27, r27
 afe:	80 2d       	mov	r24, r0
 b00:	bf 01       	movw	r22, r30
 b02:	ff 27       	eor	r31, r31
 b04:	93 58       	subi	r25, 0x83	; 131
 b06:	5f 4f       	sbci	r21, 0xFF	; 255
 b08:	3a f0       	brmi	.+14     	; 0xb18 <__divsf3_pse+0x70>
 b0a:	9e 3f       	cpi	r25, 0xFE	; 254
 b0c:	51 05       	cpc	r21, r1
 b0e:	78 f0       	brcs	.+30     	; 0xb2e <__divsf3_pse+0x86>
 b10:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_inf>
 b14:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__fp_szero>
 b18:	5f 3f       	cpi	r21, 0xFF	; 255
 b1a:	e4 f3       	brlt	.-8      	; 0xb14 <__divsf3_pse+0x6c>
 b1c:	98 3e       	cpi	r25, 0xE8	; 232
 b1e:	d4 f3       	brlt	.-12     	; 0xb14 <__divsf3_pse+0x6c>
 b20:	86 95       	lsr	r24
 b22:	77 95       	ror	r23
 b24:	67 95       	ror	r22
 b26:	b7 95       	ror	r27
 b28:	f7 95       	ror	r31
 b2a:	9f 5f       	subi	r25, 0xFF	; 255
 b2c:	c9 f7       	brne	.-14     	; 0xb20 <__divsf3_pse+0x78>
 b2e:	88 0f       	add	r24, r24
 b30:	91 1d       	adc	r25, r1
 b32:	96 95       	lsr	r25
 b34:	87 95       	ror	r24
 b36:	97 f9       	bld	r25, 7
 b38:	08 95       	ret
 b3a:	e1 e0       	ldi	r30, 0x01	; 1
 b3c:	66 0f       	add	r22, r22
 b3e:	77 1f       	adc	r23, r23
 b40:	88 1f       	adc	r24, r24
 b42:	bb 1f       	adc	r27, r27
 b44:	62 17       	cp	r22, r18
 b46:	73 07       	cpc	r23, r19
 b48:	84 07       	cpc	r24, r20
 b4a:	ba 07       	cpc	r27, r26
 b4c:	20 f0       	brcs	.+8      	; 0xb56 <__divsf3_pse+0xae>
 b4e:	62 1b       	sub	r22, r18
 b50:	73 0b       	sbc	r23, r19
 b52:	84 0b       	sbc	r24, r20
 b54:	ba 0b       	sbc	r27, r26
 b56:	ee 1f       	adc	r30, r30
 b58:	88 f7       	brcc	.-30     	; 0xb3c <__divsf3_pse+0x94>
 b5a:	e0 95       	com	r30
 b5c:	08 95       	ret

00000b5e <__fixsfsi>:
 b5e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__fixunssfsi>
 b62:	68 94       	set
 b64:	b1 11       	cpse	r27, r1
 b66:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__fp_szero>
 b6a:	08 95       	ret

00000b6c <__fixunssfsi>:
 b6c:	0e 94 52 06 	call	0xca4	; 0xca4 <__fp_splitA>
 b70:	88 f0       	brcs	.+34     	; 0xb94 <__fixunssfsi+0x28>
 b72:	9f 57       	subi	r25, 0x7F	; 127
 b74:	98 f0       	brcs	.+38     	; 0xb9c <__fixunssfsi+0x30>
 b76:	b9 2f       	mov	r27, r25
 b78:	99 27       	eor	r25, r25
 b7a:	b7 51       	subi	r27, 0x17	; 23
 b7c:	b0 f0       	brcs	.+44     	; 0xbaa <__fixunssfsi+0x3e>
 b7e:	e1 f0       	breq	.+56     	; 0xbb8 <__fixunssfsi+0x4c>
 b80:	66 0f       	add	r22, r22
 b82:	77 1f       	adc	r23, r23
 b84:	88 1f       	adc	r24, r24
 b86:	99 1f       	adc	r25, r25
 b88:	1a f0       	brmi	.+6      	; 0xb90 <__fixunssfsi+0x24>
 b8a:	ba 95       	dec	r27
 b8c:	c9 f7       	brne	.-14     	; 0xb80 <__fixunssfsi+0x14>
 b8e:	14 c0       	rjmp	.+40     	; 0xbb8 <__fixunssfsi+0x4c>
 b90:	b1 30       	cpi	r27, 0x01	; 1
 b92:	91 f0       	breq	.+36     	; 0xbb8 <__fixunssfsi+0x4c>
 b94:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__fp_zero>
 b98:	b1 e0       	ldi	r27, 0x01	; 1
 b9a:	08 95       	ret
 b9c:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_zero>
 ba0:	67 2f       	mov	r22, r23
 ba2:	78 2f       	mov	r23, r24
 ba4:	88 27       	eor	r24, r24
 ba6:	b8 5f       	subi	r27, 0xF8	; 248
 ba8:	39 f0       	breq	.+14     	; 0xbb8 <__fixunssfsi+0x4c>
 baa:	b9 3f       	cpi	r27, 0xF9	; 249
 bac:	cc f3       	brlt	.-14     	; 0xba0 <__fixunssfsi+0x34>
 bae:	86 95       	lsr	r24
 bb0:	77 95       	ror	r23
 bb2:	67 95       	ror	r22
 bb4:	b3 95       	inc	r27
 bb6:	d9 f7       	brne	.-10     	; 0xbae <__fixunssfsi+0x42>
 bb8:	3e f4       	brtc	.+14     	; 0xbc8 <__fixunssfsi+0x5c>
 bba:	90 95       	com	r25
 bbc:	80 95       	com	r24
 bbe:	70 95       	com	r23
 bc0:	61 95       	neg	r22
 bc2:	7f 4f       	sbci	r23, 0xFF	; 255
 bc4:	8f 4f       	sbci	r24, 0xFF	; 255
 bc6:	9f 4f       	sbci	r25, 0xFF	; 255
 bc8:	08 95       	ret

00000bca <__floatunsisf>:
 bca:	e8 94       	clt
 bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <__floatsisf+0x12>

00000bce <__floatsisf>:
 bce:	97 fb       	bst	r25, 7
 bd0:	3e f4       	brtc	.+14     	; 0xbe0 <__floatsisf+0x12>
 bd2:	90 95       	com	r25
 bd4:	80 95       	com	r24
 bd6:	70 95       	com	r23
 bd8:	61 95       	neg	r22
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	8f 4f       	sbci	r24, 0xFF	; 255
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	99 23       	and	r25, r25
 be2:	a9 f0       	breq	.+42     	; 0xc0e <__floatsisf+0x40>
 be4:	f9 2f       	mov	r31, r25
 be6:	96 e9       	ldi	r25, 0x96	; 150
 be8:	bb 27       	eor	r27, r27
 bea:	93 95       	inc	r25
 bec:	f6 95       	lsr	r31
 bee:	87 95       	ror	r24
 bf0:	77 95       	ror	r23
 bf2:	67 95       	ror	r22
 bf4:	b7 95       	ror	r27
 bf6:	f1 11       	cpse	r31, r1
 bf8:	f8 cf       	rjmp	.-16     	; 0xbea <__floatsisf+0x1c>
 bfa:	fa f4       	brpl	.+62     	; 0xc3a <__floatsisf+0x6c>
 bfc:	bb 0f       	add	r27, r27
 bfe:	11 f4       	brne	.+4      	; 0xc04 <__floatsisf+0x36>
 c00:	60 ff       	sbrs	r22, 0
 c02:	1b c0       	rjmp	.+54     	; 0xc3a <__floatsisf+0x6c>
 c04:	6f 5f       	subi	r22, 0xFF	; 255
 c06:	7f 4f       	sbci	r23, 0xFF	; 255
 c08:	8f 4f       	sbci	r24, 0xFF	; 255
 c0a:	9f 4f       	sbci	r25, 0xFF	; 255
 c0c:	16 c0       	rjmp	.+44     	; 0xc3a <__floatsisf+0x6c>
 c0e:	88 23       	and	r24, r24
 c10:	11 f0       	breq	.+4      	; 0xc16 <__floatsisf+0x48>
 c12:	96 e9       	ldi	r25, 0x96	; 150
 c14:	11 c0       	rjmp	.+34     	; 0xc38 <__floatsisf+0x6a>
 c16:	77 23       	and	r23, r23
 c18:	21 f0       	breq	.+8      	; 0xc22 <__floatsisf+0x54>
 c1a:	9e e8       	ldi	r25, 0x8E	; 142
 c1c:	87 2f       	mov	r24, r23
 c1e:	76 2f       	mov	r23, r22
 c20:	05 c0       	rjmp	.+10     	; 0xc2c <__floatsisf+0x5e>
 c22:	66 23       	and	r22, r22
 c24:	71 f0       	breq	.+28     	; 0xc42 <__floatsisf+0x74>
 c26:	96 e8       	ldi	r25, 0x86	; 134
 c28:	86 2f       	mov	r24, r22
 c2a:	70 e0       	ldi	r23, 0x00	; 0
 c2c:	60 e0       	ldi	r22, 0x00	; 0
 c2e:	2a f0       	brmi	.+10     	; 0xc3a <__floatsisf+0x6c>
 c30:	9a 95       	dec	r25
 c32:	66 0f       	add	r22, r22
 c34:	77 1f       	adc	r23, r23
 c36:	88 1f       	adc	r24, r24
 c38:	da f7       	brpl	.-10     	; 0xc30 <__floatsisf+0x62>
 c3a:	88 0f       	add	r24, r24
 c3c:	96 95       	lsr	r25
 c3e:	87 95       	ror	r24
 c40:	97 f9       	bld	r25, 7
 c42:	08 95       	ret

00000c44 <__fp_inf>:
 c44:	97 f9       	bld	r25, 7
 c46:	9f 67       	ori	r25, 0x7F	; 127
 c48:	80 e8       	ldi	r24, 0x80	; 128
 c4a:	70 e0       	ldi	r23, 0x00	; 0
 c4c:	60 e0       	ldi	r22, 0x00	; 0
 c4e:	08 95       	ret

00000c50 <__fp_nan>:
 c50:	9f ef       	ldi	r25, 0xFF	; 255
 c52:	80 ec       	ldi	r24, 0xC0	; 192
 c54:	08 95       	ret

00000c56 <__fp_pscA>:
 c56:	00 24       	eor	r0, r0
 c58:	0a 94       	dec	r0
 c5a:	16 16       	cp	r1, r22
 c5c:	17 06       	cpc	r1, r23
 c5e:	18 06       	cpc	r1, r24
 c60:	09 06       	cpc	r0, r25
 c62:	08 95       	ret

00000c64 <__fp_pscB>:
 c64:	00 24       	eor	r0, r0
 c66:	0a 94       	dec	r0
 c68:	12 16       	cp	r1, r18
 c6a:	13 06       	cpc	r1, r19
 c6c:	14 06       	cpc	r1, r20
 c6e:	05 06       	cpc	r0, r21
 c70:	08 95       	ret

00000c72 <__fp_round>:
 c72:	09 2e       	mov	r0, r25
 c74:	03 94       	inc	r0
 c76:	00 0c       	add	r0, r0
 c78:	11 f4       	brne	.+4      	; 0xc7e <__fp_round+0xc>
 c7a:	88 23       	and	r24, r24
 c7c:	52 f0       	brmi	.+20     	; 0xc92 <__fp_round+0x20>
 c7e:	bb 0f       	add	r27, r27
 c80:	40 f4       	brcc	.+16     	; 0xc92 <__fp_round+0x20>
 c82:	bf 2b       	or	r27, r31
 c84:	11 f4       	brne	.+4      	; 0xc8a <__fp_round+0x18>
 c86:	60 ff       	sbrs	r22, 0
 c88:	04 c0       	rjmp	.+8      	; 0xc92 <__fp_round+0x20>
 c8a:	6f 5f       	subi	r22, 0xFF	; 255
 c8c:	7f 4f       	sbci	r23, 0xFF	; 255
 c8e:	8f 4f       	sbci	r24, 0xFF	; 255
 c90:	9f 4f       	sbci	r25, 0xFF	; 255
 c92:	08 95       	ret

00000c94 <__fp_split3>:
 c94:	57 fd       	sbrc	r21, 7
 c96:	90 58       	subi	r25, 0x80	; 128
 c98:	44 0f       	add	r20, r20
 c9a:	55 1f       	adc	r21, r21
 c9c:	59 f0       	breq	.+22     	; 0xcb4 <__fp_splitA+0x10>
 c9e:	5f 3f       	cpi	r21, 0xFF	; 255
 ca0:	71 f0       	breq	.+28     	; 0xcbe <__fp_splitA+0x1a>
 ca2:	47 95       	ror	r20

00000ca4 <__fp_splitA>:
 ca4:	88 0f       	add	r24, r24
 ca6:	97 fb       	bst	r25, 7
 ca8:	99 1f       	adc	r25, r25
 caa:	61 f0       	breq	.+24     	; 0xcc4 <__fp_splitA+0x20>
 cac:	9f 3f       	cpi	r25, 0xFF	; 255
 cae:	79 f0       	breq	.+30     	; 0xcce <__fp_splitA+0x2a>
 cb0:	87 95       	ror	r24
 cb2:	08 95       	ret
 cb4:	12 16       	cp	r1, r18
 cb6:	13 06       	cpc	r1, r19
 cb8:	14 06       	cpc	r1, r20
 cba:	55 1f       	adc	r21, r21
 cbc:	f2 cf       	rjmp	.-28     	; 0xca2 <__fp_split3+0xe>
 cbe:	46 95       	lsr	r20
 cc0:	f1 df       	rcall	.-30     	; 0xca4 <__fp_splitA>
 cc2:	08 c0       	rjmp	.+16     	; 0xcd4 <__fp_splitA+0x30>
 cc4:	16 16       	cp	r1, r22
 cc6:	17 06       	cpc	r1, r23
 cc8:	18 06       	cpc	r1, r24
 cca:	99 1f       	adc	r25, r25
 ccc:	f1 cf       	rjmp	.-30     	; 0xcb0 <__fp_splitA+0xc>
 cce:	86 95       	lsr	r24
 cd0:	71 05       	cpc	r23, r1
 cd2:	61 05       	cpc	r22, r1
 cd4:	08 94       	sec
 cd6:	08 95       	ret

00000cd8 <__fp_zero>:
 cd8:	e8 94       	clt

00000cda <__fp_szero>:
 cda:	bb 27       	eor	r27, r27
 cdc:	66 27       	eor	r22, r22
 cde:	77 27       	eor	r23, r23
 ce0:	cb 01       	movw	r24, r22
 ce2:	97 f9       	bld	r25, 7
 ce4:	08 95       	ret

00000ce6 <__mulsf3>:
 ce6:	0e 94 86 06 	call	0xd0c	; 0xd0c <__mulsf3x>
 cea:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__fp_round>
 cee:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fp_pscA>
 cf2:	38 f0       	brcs	.+14     	; 0xd02 <__mulsf3+0x1c>
 cf4:	0e 94 32 06 	call	0xc64	; 0xc64 <__fp_pscB>
 cf8:	20 f0       	brcs	.+8      	; 0xd02 <__mulsf3+0x1c>
 cfa:	95 23       	and	r25, r21
 cfc:	11 f0       	breq	.+4      	; 0xd02 <__mulsf3+0x1c>
 cfe:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_inf>
 d02:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_nan>
 d06:	11 24       	eor	r1, r1
 d08:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__fp_szero>

00000d0c <__mulsf3x>:
 d0c:	0e 94 4a 06 	call	0xc94	; 0xc94 <__fp_split3>
 d10:	70 f3       	brcs	.-36     	; 0xcee <__mulsf3+0x8>

00000d12 <__mulsf3_pse>:
 d12:	95 9f       	mul	r25, r21
 d14:	c1 f3       	breq	.-16     	; 0xd06 <__mulsf3+0x20>
 d16:	95 0f       	add	r25, r21
 d18:	50 e0       	ldi	r21, 0x00	; 0
 d1a:	55 1f       	adc	r21, r21
 d1c:	62 9f       	mul	r22, r18
 d1e:	f0 01       	movw	r30, r0
 d20:	72 9f       	mul	r23, r18
 d22:	bb 27       	eor	r27, r27
 d24:	f0 0d       	add	r31, r0
 d26:	b1 1d       	adc	r27, r1
 d28:	63 9f       	mul	r22, r19
 d2a:	aa 27       	eor	r26, r26
 d2c:	f0 0d       	add	r31, r0
 d2e:	b1 1d       	adc	r27, r1
 d30:	aa 1f       	adc	r26, r26
 d32:	64 9f       	mul	r22, r20
 d34:	66 27       	eor	r22, r22
 d36:	b0 0d       	add	r27, r0
 d38:	a1 1d       	adc	r26, r1
 d3a:	66 1f       	adc	r22, r22
 d3c:	82 9f       	mul	r24, r18
 d3e:	22 27       	eor	r18, r18
 d40:	b0 0d       	add	r27, r0
 d42:	a1 1d       	adc	r26, r1
 d44:	62 1f       	adc	r22, r18
 d46:	73 9f       	mul	r23, r19
 d48:	b0 0d       	add	r27, r0
 d4a:	a1 1d       	adc	r26, r1
 d4c:	62 1f       	adc	r22, r18
 d4e:	83 9f       	mul	r24, r19
 d50:	a0 0d       	add	r26, r0
 d52:	61 1d       	adc	r22, r1
 d54:	22 1f       	adc	r18, r18
 d56:	74 9f       	mul	r23, r20
 d58:	33 27       	eor	r19, r19
 d5a:	a0 0d       	add	r26, r0
 d5c:	61 1d       	adc	r22, r1
 d5e:	23 1f       	adc	r18, r19
 d60:	84 9f       	mul	r24, r20
 d62:	60 0d       	add	r22, r0
 d64:	21 1d       	adc	r18, r1
 d66:	82 2f       	mov	r24, r18
 d68:	76 2f       	mov	r23, r22
 d6a:	6a 2f       	mov	r22, r26
 d6c:	11 24       	eor	r1, r1
 d6e:	9f 57       	subi	r25, 0x7F	; 127
 d70:	50 40       	sbci	r21, 0x00	; 0
 d72:	9a f0       	brmi	.+38     	; 0xd9a <__mulsf3_pse+0x88>
 d74:	f1 f0       	breq	.+60     	; 0xdb2 <__mulsf3_pse+0xa0>
 d76:	88 23       	and	r24, r24
 d78:	4a f0       	brmi	.+18     	; 0xd8c <__mulsf3_pse+0x7a>
 d7a:	ee 0f       	add	r30, r30
 d7c:	ff 1f       	adc	r31, r31
 d7e:	bb 1f       	adc	r27, r27
 d80:	66 1f       	adc	r22, r22
 d82:	77 1f       	adc	r23, r23
 d84:	88 1f       	adc	r24, r24
 d86:	91 50       	subi	r25, 0x01	; 1
 d88:	50 40       	sbci	r21, 0x00	; 0
 d8a:	a9 f7       	brne	.-22     	; 0xd76 <__mulsf3_pse+0x64>
 d8c:	9e 3f       	cpi	r25, 0xFE	; 254
 d8e:	51 05       	cpc	r21, r1
 d90:	80 f0       	brcs	.+32     	; 0xdb2 <__mulsf3_pse+0xa0>
 d92:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__fp_inf>
 d96:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__fp_szero>
 d9a:	5f 3f       	cpi	r21, 0xFF	; 255
 d9c:	e4 f3       	brlt	.-8      	; 0xd96 <__mulsf3_pse+0x84>
 d9e:	98 3e       	cpi	r25, 0xE8	; 232
 da0:	d4 f3       	brlt	.-12     	; 0xd96 <__mulsf3_pse+0x84>
 da2:	86 95       	lsr	r24
 da4:	77 95       	ror	r23
 da6:	67 95       	ror	r22
 da8:	b7 95       	ror	r27
 daa:	f7 95       	ror	r31
 dac:	e7 95       	ror	r30
 dae:	9f 5f       	subi	r25, 0xFF	; 255
 db0:	c1 f7       	brne	.-16     	; 0xda2 <__mulsf3_pse+0x90>
 db2:	fe 2b       	or	r31, r30
 db4:	88 0f       	add	r24, r24
 db6:	91 1d       	adc	r25, r1
 db8:	96 95       	lsr	r25
 dba:	87 95       	ror	r24
 dbc:	97 f9       	bld	r25, 7
 dbe:	08 95       	ret

00000dc0 <__muluhisi3>:
 dc0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__umulhisi3>
 dc4:	a5 9f       	mul	r26, r21
 dc6:	90 0d       	add	r25, r0
 dc8:	b4 9f       	mul	r27, r20
 dca:	90 0d       	add	r25, r0
 dcc:	a4 9f       	mul	r26, r20
 dce:	80 0d       	add	r24, r0
 dd0:	91 1d       	adc	r25, r1
 dd2:	11 24       	eor	r1, r1
 dd4:	08 95       	ret

00000dd6 <__moddi3>:
 dd6:	68 94       	set
 dd8:	01 c0       	rjmp	.+2      	; 0xddc <__divdi3_moddi3>

00000dda <__divdi3>:
 dda:	e8 94       	clt

00000ddc <__divdi3_moddi3>:
 ddc:	f9 2f       	mov	r31, r25
 dde:	f1 2b       	or	r31, r17
 de0:	12 f0       	brmi	.+4      	; 0xde6 <__divdi3_moddi3+0xa>
 de2:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__udivdi3_umoddi3>
 de6:	a0 e0       	ldi	r26, 0x00	; 0
 de8:	b0 e0       	ldi	r27, 0x00	; 0
 dea:	e9 ef       	ldi	r30, 0xF9	; 249
 dec:	f6 e0       	ldi	r31, 0x06	; 6
 dee:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__prologue_saves__+0xc>
 df2:	09 2e       	mov	r0, r25
 df4:	05 94       	asr	r0
 df6:	22 f4       	brpl	.+8      	; 0xe00 <__divdi3_moddi3+0x24>
 df8:	0e 94 7b 07 	call	0xef6	; 0xef6 <__negdi2>
 dfc:	11 23       	and	r17, r17
 dfe:	92 f4       	brpl	.+36     	; 0xe24 <__divdi3_moddi3+0x48>
 e00:	f0 e8       	ldi	r31, 0x80	; 128
 e02:	0f 26       	eor	r0, r31
 e04:	ff ef       	ldi	r31, 0xFF	; 255
 e06:	e0 94       	com	r14
 e08:	f0 94       	com	r15
 e0a:	00 95       	com	r16
 e0c:	10 95       	com	r17
 e0e:	b0 94       	com	r11
 e10:	c0 94       	com	r12
 e12:	d0 94       	com	r13
 e14:	a1 94       	neg	r10
 e16:	bf 0a       	sbc	r11, r31
 e18:	cf 0a       	sbc	r12, r31
 e1a:	df 0a       	sbc	r13, r31
 e1c:	ef 0a       	sbc	r14, r31
 e1e:	ff 0a       	sbc	r15, r31
 e20:	0f 0b       	sbc	r16, r31
 e22:	1f 0b       	sbc	r17, r31
 e24:	0e 94 2a 07 	call	0xe54	; 0xe54 <__udivmod64>
 e28:	07 fc       	sbrc	r0, 7
 e2a:	0e 94 7b 07 	call	0xef6	; 0xef6 <__negdi2>
 e2e:	cd b7       	in	r28, 0x3d	; 61
 e30:	de b7       	in	r29, 0x3e	; 62
 e32:	ec e0       	ldi	r30, 0x0C	; 12
 e34:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__epilogue_restores__+0xc>

00000e38 <__umoddi3>:
 e38:	68 94       	set
 e3a:	01 c0       	rjmp	.+2      	; 0xe3e <__udivdi3_umoddi3>

00000e3c <__udivdi3>:
 e3c:	e8 94       	clt

00000e3e <__udivdi3_umoddi3>:
 e3e:	8f 92       	push	r8
 e40:	9f 92       	push	r9
 e42:	cf 93       	push	r28
 e44:	df 93       	push	r29
 e46:	0e 94 2a 07 	call	0xe54	; 0xe54 <__udivmod64>
 e4a:	df 91       	pop	r29
 e4c:	cf 91       	pop	r28
 e4e:	9f 90       	pop	r9
 e50:	8f 90       	pop	r8
 e52:	08 95       	ret

00000e54 <__udivmod64>:
 e54:	88 24       	eor	r8, r8
 e56:	99 24       	eor	r9, r9
 e58:	f4 01       	movw	r30, r8
 e5a:	e4 01       	movw	r28, r8
 e5c:	b0 e4       	ldi	r27, 0x40	; 64
 e5e:	9f 93       	push	r25
 e60:	aa 27       	eor	r26, r26
 e62:	9a 15       	cp	r25, r10
 e64:	8b 04       	cpc	r8, r11
 e66:	9c 04       	cpc	r9, r12
 e68:	ed 05       	cpc	r30, r13
 e6a:	fe 05       	cpc	r31, r14
 e6c:	cf 05       	cpc	r28, r15
 e6e:	d0 07       	cpc	r29, r16
 e70:	a1 07       	cpc	r26, r17
 e72:	98 f4       	brcc	.+38     	; 0xe9a <__udivmod64+0x46>
 e74:	ad 2f       	mov	r26, r29
 e76:	dc 2f       	mov	r29, r28
 e78:	cf 2f       	mov	r28, r31
 e7a:	fe 2f       	mov	r31, r30
 e7c:	e9 2d       	mov	r30, r9
 e7e:	98 2c       	mov	r9, r8
 e80:	89 2e       	mov	r8, r25
 e82:	98 2f       	mov	r25, r24
 e84:	87 2f       	mov	r24, r23
 e86:	76 2f       	mov	r23, r22
 e88:	65 2f       	mov	r22, r21
 e8a:	54 2f       	mov	r21, r20
 e8c:	43 2f       	mov	r20, r19
 e8e:	32 2f       	mov	r19, r18
 e90:	22 27       	eor	r18, r18
 e92:	b8 50       	subi	r27, 0x08	; 8
 e94:	31 f7       	brne	.-52     	; 0xe62 <__udivmod64+0xe>
 e96:	bf 91       	pop	r27
 e98:	27 c0       	rjmp	.+78     	; 0xee8 <__udivmod64+0x94>
 e9a:	1b 2e       	mov	r1, r27
 e9c:	bf 91       	pop	r27
 e9e:	bb 27       	eor	r27, r27
 ea0:	22 0f       	add	r18, r18
 ea2:	33 1f       	adc	r19, r19
 ea4:	44 1f       	adc	r20, r20
 ea6:	55 1f       	adc	r21, r21
 ea8:	66 1f       	adc	r22, r22
 eaa:	77 1f       	adc	r23, r23
 eac:	88 1f       	adc	r24, r24
 eae:	99 1f       	adc	r25, r25
 eb0:	88 1c       	adc	r8, r8
 eb2:	99 1c       	adc	r9, r9
 eb4:	ee 1f       	adc	r30, r30
 eb6:	ff 1f       	adc	r31, r31
 eb8:	cc 1f       	adc	r28, r28
 eba:	dd 1f       	adc	r29, r29
 ebc:	aa 1f       	adc	r26, r26
 ebe:	bb 1f       	adc	r27, r27
 ec0:	8a 14       	cp	r8, r10
 ec2:	9b 04       	cpc	r9, r11
 ec4:	ec 05       	cpc	r30, r12
 ec6:	fd 05       	cpc	r31, r13
 ec8:	ce 05       	cpc	r28, r14
 eca:	df 05       	cpc	r29, r15
 ecc:	a0 07       	cpc	r26, r16
 ece:	b1 07       	cpc	r27, r17
 ed0:	48 f0       	brcs	.+18     	; 0xee4 <__udivmod64+0x90>
 ed2:	8a 18       	sub	r8, r10
 ed4:	9b 08       	sbc	r9, r11
 ed6:	ec 09       	sbc	r30, r12
 ed8:	fd 09       	sbc	r31, r13
 eda:	ce 09       	sbc	r28, r14
 edc:	df 09       	sbc	r29, r15
 ede:	a0 0b       	sbc	r26, r16
 ee0:	b1 0b       	sbc	r27, r17
 ee2:	21 60       	ori	r18, 0x01	; 1
 ee4:	1a 94       	dec	r1
 ee6:	e1 f6       	brne	.-72     	; 0xea0 <__udivmod64+0x4c>
 ee8:	2e f4       	brtc	.+10     	; 0xef4 <__udivmod64+0xa0>
 eea:	94 01       	movw	r18, r8
 eec:	af 01       	movw	r20, r30
 eee:	be 01       	movw	r22, r28
 ef0:	cd 01       	movw	r24, r26
 ef2:	00 0c       	add	r0, r0
 ef4:	08 95       	ret

00000ef6 <__negdi2>:
 ef6:	60 95       	com	r22
 ef8:	70 95       	com	r23
 efa:	80 95       	com	r24
 efc:	90 95       	com	r25
 efe:	30 95       	com	r19
 f00:	40 95       	com	r20
 f02:	50 95       	com	r21
 f04:	21 95       	neg	r18
 f06:	3f 4f       	sbci	r19, 0xFF	; 255
 f08:	4f 4f       	sbci	r20, 0xFF	; 255
 f0a:	5f 4f       	sbci	r21, 0xFF	; 255
 f0c:	6f 4f       	sbci	r22, 0xFF	; 255
 f0e:	7f 4f       	sbci	r23, 0xFF	; 255
 f10:	8f 4f       	sbci	r24, 0xFF	; 255
 f12:	9f 4f       	sbci	r25, 0xFF	; 255
 f14:	08 95       	ret

00000f16 <__prologue_saves__>:
 f16:	2f 92       	push	r2
 f18:	3f 92       	push	r3
 f1a:	4f 92       	push	r4
 f1c:	5f 92       	push	r5
 f1e:	6f 92       	push	r6
 f20:	7f 92       	push	r7
 f22:	8f 92       	push	r8
 f24:	9f 92       	push	r9
 f26:	af 92       	push	r10
 f28:	bf 92       	push	r11
 f2a:	cf 92       	push	r12
 f2c:	df 92       	push	r13
 f2e:	ef 92       	push	r14
 f30:	ff 92       	push	r15
 f32:	0f 93       	push	r16
 f34:	1f 93       	push	r17
 f36:	cf 93       	push	r28
 f38:	df 93       	push	r29
 f3a:	cd b7       	in	r28, 0x3d	; 61
 f3c:	de b7       	in	r29, 0x3e	; 62
 f3e:	ca 1b       	sub	r28, r26
 f40:	db 0b       	sbc	r29, r27
 f42:	0f b6       	in	r0, 0x3f	; 63
 f44:	f8 94       	cli
 f46:	de bf       	out	0x3e, r29	; 62
 f48:	0f be       	out	0x3f, r0	; 63
 f4a:	cd bf       	out	0x3d, r28	; 61
 f4c:	09 94       	ijmp

00000f4e <__epilogue_restores__>:
 f4e:	2a 88       	ldd	r2, Y+18	; 0x12
 f50:	39 88       	ldd	r3, Y+17	; 0x11
 f52:	48 88       	ldd	r4, Y+16	; 0x10
 f54:	5f 84       	ldd	r5, Y+15	; 0x0f
 f56:	6e 84       	ldd	r6, Y+14	; 0x0e
 f58:	7d 84       	ldd	r7, Y+13	; 0x0d
 f5a:	8c 84       	ldd	r8, Y+12	; 0x0c
 f5c:	9b 84       	ldd	r9, Y+11	; 0x0b
 f5e:	aa 84       	ldd	r10, Y+10	; 0x0a
 f60:	b9 84       	ldd	r11, Y+9	; 0x09
 f62:	c8 84       	ldd	r12, Y+8	; 0x08
 f64:	df 80       	ldd	r13, Y+7	; 0x07
 f66:	ee 80       	ldd	r14, Y+6	; 0x06
 f68:	fd 80       	ldd	r15, Y+5	; 0x05
 f6a:	0c 81       	ldd	r16, Y+4	; 0x04
 f6c:	1b 81       	ldd	r17, Y+3	; 0x03
 f6e:	aa 81       	ldd	r26, Y+2	; 0x02
 f70:	b9 81       	ldd	r27, Y+1	; 0x01
 f72:	ce 0f       	add	r28, r30
 f74:	d1 1d       	adc	r29, r1
 f76:	0f b6       	in	r0, 0x3f	; 63
 f78:	f8 94       	cli
 f7a:	de bf       	out	0x3e, r29	; 62
 f7c:	0f be       	out	0x3f, r0	; 63
 f7e:	cd bf       	out	0x3d, r28	; 61
 f80:	ed 01       	movw	r28, r26
 f82:	08 95       	ret

00000f84 <__cmpdi2_s8>:
 f84:	00 24       	eor	r0, r0
 f86:	a7 fd       	sbrc	r26, 7
 f88:	00 94       	com	r0
 f8a:	2a 17       	cp	r18, r26
 f8c:	30 05       	cpc	r19, r0
 f8e:	40 05       	cpc	r20, r0
 f90:	50 05       	cpc	r21, r0
 f92:	60 05       	cpc	r22, r0
 f94:	70 05       	cpc	r23, r0
 f96:	80 05       	cpc	r24, r0
 f98:	90 05       	cpc	r25, r0
 f9a:	08 95       	ret

00000f9c <__umulhisi3>:
 f9c:	a2 9f       	mul	r26, r18
 f9e:	b0 01       	movw	r22, r0
 fa0:	b3 9f       	mul	r27, r19
 fa2:	c0 01       	movw	r24, r0
 fa4:	a3 9f       	mul	r26, r19
 fa6:	70 0d       	add	r23, r0
 fa8:	81 1d       	adc	r24, r1
 faa:	11 24       	eor	r1, r1
 fac:	91 1d       	adc	r25, r1
 fae:	b2 9f       	mul	r27, r18
 fb0:	70 0d       	add	r23, r0
 fb2:	81 1d       	adc	r24, r1
 fb4:	11 24       	eor	r1, r1
 fb6:	91 1d       	adc	r25, r1
 fb8:	08 95       	ret

00000fba <_exit>:
 fba:	f8 94       	cli

00000fbc <__stop_program>:
 fbc:	ff cf       	rjmp	.-2      	; 0xfbc <__stop_program>
